{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "repro-03052021"
		},
		"AzureDataLakeStorageDemo_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorageDemo'"
		},
		"AzureDatabricks2_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricks2'"
		},
		"AzureSqlDatabaseDemo_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabaseDemo'"
		},
		"AzureDataLakeStorageTestNagesg_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorageTestNagesg'"
		},
		"AzureDataLakeStorageDemo_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adfdemosstore.dfs.core.windows.net"
		},
		"MoviesS3_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/djpmsft/adf-ready-demo/master/moviesDB.csv"
		},
		"SSIS-IR-1_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint": {
			"type": "string",
			"defaultValue": "msftrepro.database.windows.net"
		},
		"SSIS-IR-1_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName": {
			"type": "string",
			"defaultValue": "msftrepro"
		},
		"SSIS-IR-1_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword": {
			"type": "secureString"
		},
		"AzureDataLakeStorageTestNagesg_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adfdemosstore.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Blob-Sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedTextDemo",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableDemo",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-07-22T08:03:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedTextDemo')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Databricks_Test2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/mynotebook"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks2",
							"type": "LinkedServiceReference",
							"parameters": {
								"A": {
									"value": "@pipeline().globalParameters.URL",
									"type": "Expression"
								},
								"B": {
									"value": "@pipeline().globalParameters.ID",
									"type": "Expression"
								}
							}
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-07-16T07:24:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/First_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-07-14T11:58:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fourth_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"parameters": {
					"Test1": {
						"type": "string",
						"defaultValue": "A"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-07-14T13:33:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Movie Analytics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this template to get an understanding of how to leverage the capabilities of Copy and Mapping Data Flow in Azure Data Factory\n\nThis pipeline copies a delimited text movies database from S3 to ADLS gen 2 and then Executes a Mapping Data Flow to calculate aggregate metrics by year and genre, and then write to a SQL DW",
				"activities": [
					{
						"name": "AggregateAndWriteToDW",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "MoveFromS3ToADLS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AggregateMoviesDataFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesADLS": {},
									"SinkToDW": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "MoveFromS3ToADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "MoviesS3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoviesHTTPDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-07-22T09:48:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AggregateMoviesDataFlow')]",
				"[concat(variables('factoryId'), '/datasets/MoviesS3')]",
				"[concat(variables('factoryId'), '/datasets/MoviesHTTPDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Second_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"parameters": {
					"Param1": {
						"type": "string",
						"defaultValue": "A"
					},
					"Param2": {
						"type": "string",
						"defaultValue": "B"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-07-14T12:23:19Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_Nagesh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test_Saurav')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-07-15T10:07:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Third_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"parameters": {
					"Ramesh1": {
						"type": "string",
						"defaultValue": "A"
					},
					"Ramesh2": {
						"type": "string",
						"defaultValue": "B"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-07-14T13:26:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDemo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDemo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "mockdatasample"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextDemo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDemo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MOCK_DATA_SAMPLE.csv",
						"fileSystem": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesADLS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDemo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesadls.csv",
						"folderPath": "ready-demo/staging",
						"fileSystem": "sample-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDataIntoSQLDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabaseDemo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "moviesdata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabaseDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesHTTPDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorageDemo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesadls.csv",
						"folderPath": "ready-demo/staging",
						"fileSystem": "sample-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorageDemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesS3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MoviesS3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/MoviesS3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageDemo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageDemo_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorageDemo_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"A": {
						"type": "string"
					},
					"B": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "@linkedService().A",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricks2_accessToken')]"
					},
					"existingClusterId": "@linkedService().B"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabaseDemo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabaseDemo_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesS3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('MoviesS3_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SHIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SSIS-IR-1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "East US",
						"nodeSize": "Standard_D2_v3",
						"numberOfNodes": 2,
						"maxParallelExecutionsPerNode": 2,
						"vNetProperties": {
							"vNetId": "/subscriptions/d39a1078-3b40-4bdf-a61c-3e393be3d9f9/resourceGroups/MSFTRG/providers/Microsoft.Network/virtualNetworks/SSIS-IR-VNET1",
							"subnet": "SSIR-IR-VNET1-SUBNET-A"
						}
					},
					"ssisProperties": {
						"catalogInfo": {
							"catalogServerEndpoint": "[parameters('SSIS-IR-1_properties_typeProperties_ssisProperties_catalogInfo_catalogServerEndpoint')]",
							"catalogAdminUserName": "[parameters('SSIS-IR-1_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminUserName')]",
							"catalogAdminPassword": {
								"type": "SecureString",
								"value": "[parameters('SSIS-IR-1_properties_typeProperties_ssisProperties_catalogInfo_catalogAdminPassword')]"
							},
							"catalogPricingTier": "S1"
						},
						"edition": "Standard",
						"licenseType": "LicenseIncluded"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AggregateMoviesDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This Data Flow does the following:\n1. Take in a Movies csv file with 6 columns stored in ADLS\n2. Renaming one column and dropping another\n3. Filtering out movies released before 1900\n4. Deriving the primary genre as a new column from the existing genres column\n5. Windowing over year and primary genre to rank movies based on their Rotten Tomatoes rating\n6. Aggregating Movies based on year and primary genre to figure out average rating and the highest/lowest rated movies\n7. Specifying an Upsert condition\n8. Writing to a SQL DW sink",
				"folder": {
					"name": "Movie Analytics"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesADLS",
								"type": "DatasetReference"
							},
							"name": "MoviesADLS"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesDataIntoSQLDB",
								"type": "DatasetReference"
							},
							"name": "SinkToDW"
						}
					],
					"transformations": [
						{
							"name": "UpsertIfTrue"
						},
						{
							"name": "DerivePrimaryGenre"
						},
						{
							"name": "RankMoviesByRatings"
						},
						{
							"name": "AggregateRatings"
						},
						{
							"name": "SelectAndRename"
						},
						{
							"name": "FilterYearsBefore1950"
						}
					],
					"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> MoviesADLS\nAggregateRatings alterRow(upsertIf(true())) ~> UpsertIfTrue\nFilterYearsBefore1950 derive(PrimaryGenre = iif(locate('|', genres) > 1, left(genres, locate('|', genres) - 1), genres)) ~> DerivePrimaryGenre\nDerivePrimaryGenre window(over(PrimaryGenre,\n\t\tyear),\n\tdesc({Rotten Tomato}, true),\n\tRatingsRank = rank()) ~> RankMoviesByRatings\nRankMoviesByRatings aggregate(groupBy(PrimaryGenre,\n\t\tyear),\n\tAverageRating = avg(toInteger({Rotten Tomato})),\n\t\tHighestRated = first(title),\n\t\tLowestRated = last(title),\n\t\tNumberOfMovies = count()) ~> AggregateRatings\nMoviesADLS select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\t{Rotten Tomato} = {Rotton Tomato}\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectAndRename\nSelectAndRename filter(toInteger(year) > 1950) ~> FilterYearsBefore1950\nUpsertIfTrue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['PrimaryGenre','year'],\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tpartitionBy('hash', 1)) ~> SinkToDW"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesADLS')]",
				"[concat(variables('factoryId'), '/datasets/MoviesDataIntoSQLDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorageTestNagesg')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorageTestNagesg_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorageTestNagesg_accountKey')]"
					}
				}
			},
			"dependsOn": []
		}
	]
}